package util.migration

import java.io.File

/**
 * This script migrates Kotlin script files (.kts) to Kotlin files (.kt) and wraps top-level function calls in a main function.
 * It also handles package names with digits by wrapping them in backticks.
 *
 * Usage:
 * 1. Place this script in the `src/main/kotlin/util/migration` directory.
 * 2. Run the script to process all .kts files in the `src/main/kotlin` directory.
 *
 * This was generated by GitHub Copilot.
 */
fun main() {
    val sourceRoot = File("src/main/kotlin") // Adjust the path if needed
    processKtsFiles(sourceRoot)
    wrapTopLevelCallsInMain(sourceRoot)
    renameMainFiles(sourceRoot)
}

fun processKtsFiles(directory: File) {
    directory.walkTopDown().filter { it.isFile && it.extension == "kts" }.forEach { file ->
        val relativePath = file.parentFile.relativeTo(File("src/main/kotlin")).path
        val packageName = relativePath
            .split(File.separator)
            .joinToString(".") { part -> if (part.all { it.isDigit() }) "`$part`" else part }
            .takeIf { it.isNotEmpty() }
        val content = file.readText()

        val updatedContent = buildString {
            packageName?.let { appendLine("package $it\n") }
            append(content)
        }

        val newFile = File(file.parentFile, file.nameWithoutExtension + ".kt")
        newFile.writeText(updatedContent)
        file.delete()
    }
}

fun wrapTopLevelCallsInMain(directory: File) {
    directory.walkTopDown().filter { it.isFile && it.extension == "kt" }.forEach { file ->
        val content = file.readText()
        val functionCallRegex = Regex("""(?m)^\s*println\(.*(partOne|partTwo).*\)""")
        val matches = functionCallRegex.findAll(content).map { it.value }.toList()

        if (matches.isNotEmpty()) {
            val updatedContent = buildString {
                append(content.replace(functionCallRegex, "").trimEnd())
                append("\n\nfun main() {\n")
                matches.forEach { append("    $it\n") }
                append("}\n")
            }
            file.writeText(updatedContent)
            println("Updated: ${file.name}")
        }
    }
}

fun renameMainFiles(directory: File) {
    directory.walkTopDown()
        .filter { it.isFile && (it.name == "main.kt" || it.name == "data.kt") }
        .forEach { file ->
            val renamedFile = File(file.parentFile, file.name.replaceFirstChar { it.uppercase() })
            if (file.renameTo(renamedFile)) {
                println("Renamed: ${file.path} -> ${renamedFile.path}")
            } else {
                println("Failed to rename: ${file.path}")
            }
        }
}
